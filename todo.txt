Post Integration TESTS!
  vote only once -- (good test!)
    vote_up / down
      DONE add post_id to voted_up_posts cookie object
      DONE if post_id in vdp_id, do not allow another vote up
      DONE on socket:broadcast.vote_down
      DONE if already voted - vote up/down then vote up/down +/- 2 (update on server)
      DONE highlight if you voted
      
  DONE downcase room hashtag
  
  voted to -5 = destroy
  display questions created at with nice '1m' notation

add maxAge of 7200000 to cookie
track when users join or leave rooms and the # of users 

subtemplate for the room posts
  use angular-ui router

deploy to AWS
  http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html
  http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_console.html

Make Ionic app gobble up that JSON and have socket.io

emit when user joins room
count users in room

scale:
  on broadcast, only publish if room_name === room_name - not scalable! and every client is recieving every question across the whole system . . .

add grunt package.json and include grunt files in git


Finnegan:
  make socket-based website Express, Mongodb, Socket-io
  make finnegan
  paragraphs > words

upgrade to bcrypt with salt and hash passwords http://stackoverflow.com/questions/17201450/salt-and-hash-password-in-nodejs-w-crypto

DONE Add Jade
DONE add partials
DONE npm install nodemon --save
DONE add socket.io

DONE angular route to templates

DONE create post
DONE vote up
DONE vote down
DONE separate rooms
  DONE start on room-index.jade
  DONE navigate to /:roomName
  DONE limit post-index to see only questions in room
  DONE send room_name with post


express cookie fetcher
  var vdp_ids = JSON.parse(req.cookies.voted_down_post_ids)
  console.log(vdp_ids.indexOf(2343) > -1);
